/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccommodationListResponse,
  AccommodationRequest,
  AccommodationResponse,
} from '../models/index';
import {
    AccommodationListResponseFromJSON,
    AccommodationListResponseToJSON,
    AccommodationRequestFromJSON,
    AccommodationRequestToJSON,
    AccommodationResponseFromJSON,
    AccommodationResponseToJSON,
} from '../models/index';

export interface DeleteAccommodationsIdRequest {
    id: number;
}

export interface GetAccommodationsRequest {
    sort?: string;
    paginationWithCount?: boolean;
    paginationPage?: number;
    paginationPageSize?: number;
    paginationStart?: number;
    paginationLimit?: number;
    fields?: string;
    populate?: string;
    filters?: object;
    locale?: string;
}

export interface GetAccommodationsIdRequest {
    id: number;
}

export interface PostAccommodationsRequest {
    accommodationRequest: AccommodationRequest;
}

export interface PutAccommodationsIdRequest {
    id: number;
    accommodationRequest: AccommodationRequest;
}

/**
 * 
 */
export class AccommodationApi extends runtime.BaseAPI {

    /**
     */
    async deleteAccommodationsIdRaw(requestParameters: DeleteAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAccommodationsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accommodations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async deleteAccommodationsId(requestParameters: DeleteAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.deleteAccommodationsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccommodationsRaw(requestParameters: GetAccommodationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccommodationListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.paginationWithCount !== undefined) {
            queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
        }

        if (requestParameters.paginationPage !== undefined) {
            queryParameters['pagination[page]'] = requestParameters.paginationPage;
        }

        if (requestParameters.paginationPageSize !== undefined) {
            queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
        }

        if (requestParameters.paginationStart !== undefined) {
            queryParameters['pagination[start]'] = requestParameters.paginationStart;
        }

        if (requestParameters.paginationLimit !== undefined) {
            queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.populate !== undefined) {
            queryParameters['populate'] = requestParameters.populate;
        }

        if (requestParameters.filters !== undefined) {
            queryParameters['filters'] = requestParameters.filters;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accommodations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccommodationListResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAccommodations(requestParameters: GetAccommodationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccommodationListResponse> {
        const response = await this.getAccommodationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAccommodationsIdRaw(requestParameters: GetAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccommodationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAccommodationsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accommodations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccommodationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAccommodationsId(requestParameters: GetAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccommodationResponse> {
        const response = await this.getAccommodationsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postAccommodationsRaw(requestParameters: PostAccommodationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccommodationResponse>> {
        if (requestParameters.accommodationRequest === null || requestParameters.accommodationRequest === undefined) {
            throw new runtime.RequiredError('accommodationRequest','Required parameter requestParameters.accommodationRequest was null or undefined when calling postAccommodations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accommodations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccommodationRequestToJSON(requestParameters.accommodationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccommodationResponseFromJSON(jsonValue));
    }

    /**
     */
    async postAccommodations(requestParameters: PostAccommodationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccommodationResponse> {
        const response = await this.postAccommodationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putAccommodationsIdRaw(requestParameters: PutAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccommodationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putAccommodationsId.');
        }

        if (requestParameters.accommodationRequest === null || requestParameters.accommodationRequest === undefined) {
            throw new runtime.RequiredError('accommodationRequest','Required parameter requestParameters.accommodationRequest was null or undefined when calling putAccommodationsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accommodations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccommodationRequestToJSON(requestParameters.accommodationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccommodationResponseFromJSON(jsonValue));
    }

    /**
     */
    async putAccommodationsId(requestParameters: PutAccommodationsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccommodationResponse> {
        const response = await this.putAccommodationsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
