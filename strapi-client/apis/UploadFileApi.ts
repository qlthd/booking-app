/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadFile,
  UploadIdIdPostRequestFileInfo,
} from '../models/index';
import {
    UploadFileFromJSON,
    UploadFileToJSON,
    UploadIdIdPostRequestFileInfoFromJSON,
    UploadIdIdPostRequestFileInfoToJSON,
} from '../models/index';

export interface UploadFilesIdDeleteRequest {
    id: string;
}

export interface UploadFilesIdGetRequest {
    id: string;
}

export interface UploadPostRequest {
    files: Array<Blob>;
    path?: string;
    refId?: string;
    ref?: string;
    field?: string;
}

export interface UploadididPostRequest {
    id: string;
    fileInfo?: UploadIdIdPostRequestFileInfo;
    files?: Blob;
}

/**
 * 
 */
export class UploadFileApi extends runtime.BaseAPI {

    /**
     */
    async uploadFilesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UploadFile>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadFileFromJSON));
    }

    /**
     */
    async uploadFilesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UploadFile>> {
        const response = await this.uploadFilesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadFilesIdDeleteRaw(requestParameters: UploadFilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadFile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFilesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileFromJSON(jsonValue));
    }

    /**
     */
    async uploadFilesIdDelete(requestParameters: UploadFilesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadFile> {
        const response = await this.uploadFilesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadFilesIdGetRaw(requestParameters: UploadFilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadFile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadFilesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/upload/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadFileFromJSON(jsonValue));
    }

    /**
     */
    async uploadFilesIdGet(requestParameters: UploadFilesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadFile> {
        const response = await this.uploadFilesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload files
     * 
     */
    async uploadPostRaw(requestParameters: UploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UploadFile>>> {
        if (requestParameters.files === null || requestParameters.files === undefined) {
            throw new runtime.RequiredError('files','Required parameter requestParameters.files was null or undefined when calling uploadPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.path !== undefined) {
            formParams.append('path', requestParameters.path as any);
        }

        if (requestParameters.refId !== undefined) {
            formParams.append('refId', requestParameters.refId as any);
        }

        if (requestParameters.ref !== undefined) {
            formParams.append('ref', requestParameters.ref as any);
        }

        if (requestParameters.field !== undefined) {
            formParams.append('field', requestParameters.field as any);
        }

        if (requestParameters.files) {
            requestParameters.files.forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadFileFromJSON));
    }

    /**
     * Upload files
     * 
     */
    async uploadPost(requestParameters: UploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UploadFile>> {
        const response = await this.uploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload file information
     * 
     */
    async uploadididPostRaw(requestParameters: UploadididPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UploadFile>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadididPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.fileInfo !== undefined) {
            formParams.append('fileInfo', new Blob([JSON.stringify(UploadIdIdPostRequestFileInfoToJSON(requestParameters.fileInfo))], { type: "application/json", }));
                    }

        if (requestParameters.files !== undefined) {
            formParams.append('files', requestParameters.files as any);
        }

        const response = await this.request({
            path: `/upload?id={id}`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UploadFileFromJSON));
    }

    /**
     * Upload file information
     * 
     */
    async uploadididPost(requestParameters: UploadididPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UploadFile>> {
        const response = await this.uploadididPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
